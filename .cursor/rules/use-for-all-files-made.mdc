---
description: 
globs: 
alwaysApply: true
---
# Your rule content

- You can @ files here
- You can use markdown but dont have to
This repository serves as a lightweight CRM and project management system using Markdown files, primarily managed through interactions with an AI assistant (you!).

## Directory Structure

*   **`./README.md`**: This file.
*   **`./target-profiles.md`**: Defines ideal client profiles for outreach and qualification.
*   **`/people/`**: Contains individual files for each key contact. Files include background info, connections, associated projects, and interaction notes.
*   **`/projects/`**: Contains files for active, confirmed projects (paid work or core initiatives like community building). Each file includes status, participants, overview, action items, and relevant notes.
*   **`/active_leads/`**: Contains files for potential projects or clients still in the pipeline (qualification, negotiation, etc.). Each file includes a standardized status section (Stage, Next Step, Last Updated) along with project details and discussion summaries.
*   **`/outreach/`**: Contains files for potential leads or contacts *before* they enter the active pipeline. Used for tracking initial outreach attempts (e.g., LinkedIn/Twitter messages) and prospecting efforts.

## AI-Assisted Workflow & Proactive Management

I will proactively manage CRM files based on our conversation. My primary goal is to keep information organized and up-to-date efficiently. I will act on new information and then inform you of the changes made.

**Core Principles:**

1.  **Act on Information:** I will interpret your updates (meeting notes, call summaries, casual remarks) to identify necessary actions for contacts, leads, or projects.
2.  **Check, Then Create or Update:** Before creating any new file (person, lead, project, outreach), I will *always* search for an existing one (`file_search`, `list_dir`).
    *   **If Found:** I will read it (`read_file`) and incorporate new information or updates using `edit_file`. I will then inform you, e.g., "I've updated [File Name] with the new details."
    *   **If Not Found:** I will offer to create a new file in the appropriate directory (`/people/`, `/active_leads/`, `/outreach/`), e.g., "It looks like there's no file for [Item Name] yet. Shall I create one?" Upon your confirmation, I will create it, populating it with available details and a standard status block (for leads/projects), and then inform you, e.g., "Okay, I've created the file for [Item Name]."
3.  **Update & Infer Automatically:**
    *   I will summarize key points, decisions, and action items, adding them to the relevant file(s) using `edit_file`.
    *   I will infer and apply status changes (`Stage`, `Next Step` for leads; `Current Status`, `Next Milestone` for projects) based on new information (e.g., if you say "Proposal sent," I will update the lead's `Stage`).
    *   All file updates will include updating the `Last Updated` field to the current date (I'll run `date +%F` to get this).
    *   After making these updates, I will inform you, e.g., "I've updated [File Name] with the latest notes and adjusted its status to [New Status]."

## Standardizing File Content

To ensure files can be easily searched and processed (e.g., using `grep`):

*   **Consistent Headings:** Use consistent Markdown headings for sections within files (e.g., `## Status`, `## Overview`, `## Action Items`).
*   **`/active_leads/` File Structure:** Each file in `/active_leads/` should contain at least the following status block:
    ```markdown
    ## Status
    - **Stage:** [e.g., Qualification, Proposal Sent, Negotiation, Needs Follow-up, Archived - No Conversion]
    - **Next Step:** [Specific action item, or N/A if archived]
    - **Last Updated:** [YYYY-MM-DD]
    - **Reason (if Archived):** [Brief reason, e.g., Unresponsive, Went with competitor, Not a good fit]
    ```
*   **`/projects/` File Structure:** Each file in `/projects/` should contain at least the following status block:
    ```markdown
    ## Status
    - **Current Status:** [e.g., Planning, In Progress, On Hold, Awaiting Feedback, Blocked, Done]
    - **Next Milestone:** [Description of next major goal, or N/A if done]
    - **Due Date:** [YYYY-MM-DD, if applicable]
    - **Completion Date (if Done):** [YYYY-MM-DD]
    - **Last Updated:** [YYYY-MM-DD]
    ```

## Archiving and Completion

While the AI should proactively suggest archiving or completion based on conversational context, you can also explicitly instruct the AI:

*   **Archiving Active Leads:**
    *   Tell the AI: "Archive the [Lead Name] lead. The reason is [reason]."
    *   The AI will move the file from `/active_leads/` to `/active_leads/archive/` (e.g., `mv active_leads/lead_file.md active_leads/archive/`) and update the status section, using the current date (obtained by me running `date +%F`) for the `Last Updated` field:
        ```markdown
        ## Status
        - **Stage:** Archived - No Conversion
        - **Next Step:** N/A
        - **Last Updated:** [YYYY-MM-DD] <!-- AI will fill this with output of date +%F -->
        - **Reason:** [User-provided reason]
        ```
*   **Completing Projects:**
    *   Tell the AI: "Mark the [Project Name] project as done."
    *   The AI will move the project file from `/projects/` to `/projects/done/` (e.g., `mv projects/project_file.md projects/done/`) and update its status section, using the current date (obtained by me running `date +%F`) for the `Completion Date` and `Last Updated` fields:
        ```markdown
        ## Status
        - **Current Status:** Done
        - **Next Milestone:** N/A
        - **Completion Date:** [YYYY-MM-DD] <!-- AI will fill this with output of date +%F -->
        - **Last Updated:** [YYYY-MM-DD] <!-- AI will fill this with output of date +%F -->
        ```

## Utility Scripts

### Status Reporter (`status_reporter.py`)
This script, located in the root of the workspace, serves two main purposes:

1.  **Default Behavior (Status Table):**
    *   Running `python status_reporter.py` without arguments will scan the `/active_leads/` (excluding `/active_leads/archive/`) and `/projects/` (excluding `/projects/done/`) directories.
    *   It will output a formatted table to the console summarizing the status of each found lead and project file based on its `## Status` block. The table will include a "Staleness" column, indicating if an item hasn't been updated in over a week (e.g., shows ">7d old") or if the date couldn't be parsed (e.g., shows "No Date").
    *   **When reviewing this output, if any items are marked as stale (e.g., ">7d old"), or show "No Date" for Staleness, you (the AI) should proactively ask the user if they want to provide an update for those specific files (requesting a specific 'Last Updated' date if applicable), or if those files should be archived or marked as done. Based on the user's response, you will then proceed to update the file's status block or use CLI commands to move the file, adhering to the existing rules for archiving leads or completing projects.**

2.  **Dumping Content for Summarization (`--dump-content` option):**
    *   To get the full content of all active lead files, project files (excluding archived/done ones), or people files for summarization by an LLM (like Cursor), you can use the `--dump-content` option.
    *   **Usage:**
        *   To dump all active leads: `python status_reporter.py --dump-content leads`
        *   To dump all active projects: `python status_reporter.py --dump-content projects`
        *   To dump all people files: `python status_reporter.py --dump-content people`
    *   The script will print the full Markdown content of each file in the specified category to standard output, with clear separators (e.g., `--- START FILE: ... ---` and `--- END FILE: ... ---`). This output can be copied and provided as context to an LLM.